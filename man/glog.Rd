% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{glog}
\alias{glog}
\title{Generalized linear model constraint on hierarchical structure
by using overlapped group penalty}
\usage{
glog(y, x, g, v, hierarchy, lambda, type = "lm", rho = 0.001,
  scale = TRUE, eabs = 0.001, erel = 0.001, LL = 100, eta = 1.25,
  maxitr = 500L)
}
\arguments{
\item{y}{a vector of numeric value for response variable in the 
generalized linear regression. A matrix of n by 2 for 
survival objects. See \code{\link[survival]{Surv}}.}

\item{x}{the design matrix of n by p.}

\item{g}{a vector of group labels for the p predictor variables.}

\item{v}{a vector of 0 and 1 for the penalization status of the 
p predictor variables. 1 is for penalization and 0 for 
not penalization.}

\item{hierarchy}{hierarchy indicator. 0 for L2 penalty, 1 for the
composite L1 and L2 penalty, and 2 for the 
composite L1, L2 and ridge penalty for each 
group, respectively.}

\item{lambda}{penalty parameters, should correspond to the hierarchy
status.}

\item{type}{character variable, for different linear models based
on the response variable. For continuous response variable,
type is set ``lm''; for multinomial or binary response 
variable, type is set ``binomial''; for survival response 
variable, type is set ``survival'', respectively.}

\item{rho}{The penalty parameter in the ADMM algorithm. Default is 1e-3.}

\item{scale}{Whether or not scale the design matrix. Default is true.}

\item{eabs}{The absolute tolerance in the ADMM algorithm. Default is 1e-3.}

\item{erel}{The reletive tolerance in the ADMM algorithm. Default is 1e-3.}

\item{LL}{Initial value for the coefficient of the second-order term in 
the Majorization-Minimization step.}

\item{eta}{gradient step in the FISTA algorithm.}

\item{maxitr}{The maximum iterations in the ADMM algorithm. Default is 500.}
}
\description{
Generalized linear model constraint on hierarchical structure
by using overlapped group penalty
}
\examples{

require(coxed)
n=50;p=1000
set.seed(2018)
# set design matrix
s=10
x=matrix(0,n,1+2*p)
x[,1]=sample(c(0,1),n,replace = TRUE)
x[,seq(2,1+2*p,2)]=matrix(rnorm(n*p),n,p)
x[,seq(3,1+2*p,2)]=x[,seq(2,1+2*p,2)]*x[,1]

# set beta 
beta=c(rnorm(13,0,2),rep(0,ncol(x)-13))
beta[c(2,4,7,9)]=0

# set y
data1=x\%*\%beta
noise1=rnorm(n)
snr1=as.numeric(sqrt(var(data1)/(s*var(noise1))))
y1=data1+snr1*noise1
g=c(p+1,rep(1:p,rep(2,p)))
v=c(0,rep(1,2*p))
\dontrun{
lfit1=glog(y=as.matrix(y1),x=as.matrix(x),g=g,v=v,
          hierarchy=1,lambda=c(0.01,0.001))
}

## binomial data 
prob=exp(as.matrix(x)\%*\%as.matrix(beta))/(1+exp(as.matrix(x)\%*\%as.matrix(beta)))
y2=ifelse(prob<0.5,0,1)
\dontrun{
lfit2=glog(y=as.matrix(y2),x=as.matrix(x),g=g,v=v,
           hierarchy=1,lambda=c(0.025,0.001))
}

## survival data 
data3=sim.survdata(N=n,T=100,X=x,beta=beta)
y3=data3$data[,c("y","failed")]
y3$failed=ifelse(y3$failed,1,0)

\dontrun{
lfit3=glog(y=as.matrix(y3),x=as.matrix(x),g=g,v=v,
           hierarchy=1,lambda=c(0.075,0.001),
           type="survival")
}

}
